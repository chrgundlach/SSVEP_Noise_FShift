% script to try out some data analysis techniques for broadband-noise-flicker and classical SSVEP signals
%
% broadband noise as described in
% Zhigalov, A. & Jensen, O. Alpha oscillations do not implement gain control in early visual cortex but rather gating in 
% parieto-occipital regions. Hum. Brain Mapp. 2020.04.03.021485 (2020) doi:10.1101/2020.04.03.021485

clearvars
%% initial parameters
p.pathin = 'O:\AllgPsy\experimental_data\2022_SSVEP_Noise_FShift\eeg\epoch';
p.pathin_SCADS = 'O:\AllgPsy\experimental_data\2022_SSVEP_Noise_FShift\eeg\SCADS';
p.path_beh = 'O:\AllgPsy\experimental_data\2022_SSVEP_Noise_FShift\logs';
p.pathout = 'O:\AllgPsy\experimental_data\2022_SSVEP_Noise_FShift\eeg\results';

p.subs=             cellfun(@(x) sprintf('%02.0f',x),num2cell(1:40),'UniformOutput', false)';
p.subs=             cellfun(@(x) sprintf('%02.0f',x),num2cell(101),'UniformOutput', false)'; % pilot
p.subs2use=         [1];

p.trig.trial_start = 88;
p.trig.trial_end = 89;
p.trig.cue = [[1 2 3 4], [1 2 3 4]+100,  [1 2 3 4]+200,  [1 2 3 4]+110,  [1 2 3 4]+120,  [1 2 3 4]+210,  [1 2 3 4]+220];

p.SSVEP_freqs = [63 67];
p.BRBF_freq = 65;

p.fftres = 2^14;

p.filt_SSVEP = [60 65];
p.filt_Noise = [45 85];
p.plv_lagrange = [-100 400];

p.ep_time = [-1 2]; % time window of interest for signals
%% read in data
i_sub = 1;
EEG = pop_loadset(sprintf('VP%s_e.set',p.subs{p.subs2use(i_sub)}), p.pathin);
% pop_eegplot(EEG,1,1,1)

% read in stimulation logfile
t.file = open(fullfile(p.path_beh, sprintf('VP%s_timing.mat',p.subs{p.subs2use(i_sub)})));
Stimlog = [t.file.resp.experiment{:}];
RDK = t.file.RDK;

% read in preprocessing file
Preprocessing = load(fullfile(p.pathin_SCADS,sprintf('VP%s_Preprocess_summary.mat',p.subs{p.subs2use(i_sub)})));

%% track preprocessed trials
t.preprocess_idx = Preprocessing.PreProc.trial_blink & Preprocessing.PreProc.trial_eyemov & Preprocessing.PreProc.trial_SCADS;
t.preprocessed_in = false(size(Stimlog,2),1);
t.preprocessed_in(Preprocessing.PreProc.trial_nr(t.preprocess_idx)) = true;
t.preprocessed_trialnum = nan(size(Stimlog,2),1);
t.preprocessed_trialnum(Preprocessing.PreProc.trial_nr(t.preprocess_idx)) = ...
    1:sum(t.preprocessed_in);
t.preprocessed_in = num2cell(t.preprocessed_in); t.preprocessed_trialnum = num2cell(t.preprocessed_trialnum);
[Stimlog.EEG_prep_in] = t.preprocessed_in{:};
[Stimlog.EEG_trialnum] = t.preprocessed_trialnum{:};

    
%% some initial plotting
% index flicker type
idx.flickertype = [Stimlog.flickertype]; idx.flickertype = idx.flickertype(1:2:end);

figure;
set(gcf,'Position',[100 100 1200 300],'PaperPositionMode','auto')
% plot single-trial stimulation signals
% first SSVEP trial
subplot(1,2,1)
pl.ydata = Stimlog(find(strcmp(idx.flickertype,'SSVEP'),1,'first')).lummat;
pl.xdata = ((1:size(pl.ydata,2))-Stimlog(find(strcmp(idx.flickertype,'SSVEP'),1,'first')).pre_cue_frames-1)./480*1000;
% plot(pl.xdata,pl.ydata+[0; 0.9])
h.pl = plot(pl.xdata,pl.ydata);
xlim([-100 400])
ylim([-0.1 1.1])
h.pl(1).Color = [1 0.4 0]; h.pl(2).Color = [0 0.4 1];
ylabel('luminance')
xlabel('time in ms relative to cue')
legend({'SSVEP 1';'SSVEP 2'},'Location','SouthOutside','Orientation','horizontal')

subplot(1,2,2)
pl.ydata = Stimlog(find(strcmp(idx.flickertype,'BRBF'),1,'first')).lummat;
pl.xdata = ((1:size(pl.ydata,2))-Stimlog(find(strcmp(idx.flickertype,'BRBF'),1,'first')).pre_cue_frames-1)./480*1000;
% plot(pl.xdata,pl.ydata+[0; 0.9])
h.pl = plot(pl.xdata,pl.ydata);
xlim([-100 400])
ylim([-0.1 1.1])
h.pl(1).Color = [1 0.4 0]; h.pl(2).Color = [0 0.4 1];
ylabel('luminance')
xlabel('time in ms relative to cue')
legend({'BRBF 1';'BRBF 2'},'Location','SouthOutside','Orientation','horizontal')

% SaveCurrentFigure([pwd '\figure' ], 'single_trial_luminance')


%% extreact luminance data for
% index flicker type of trials in analysis
idx.flickertype = [Stimlog([Stimlog.EEG_prep_in]).flickertype]; idx.flickertype = idx.flickertype(1:2:end);
res.flickertype = {'SSVEP';'BRBF'};

res.lum.times = ((1:diff(p.ep_time)*480)-1)/480 + p.ep_time(1);
res.lum.data = nan(2,numel(res.lum.times),max([Stimlog.EEG_trialnum]));
res.lum.flickertype = repmat({''},max([Stimlog.EEG_trialnum]),1);

% loop across trials
for i_tr = 1:max([Stimlog.EEG_trialnum])
    t.tridx = find([Stimlog.EEG_trialnum]== i_tr);
    
    % extract luminance data
    t.lumdata = Stimlog(t.tridx).lummat;
    t.tdata = ((1:size(t.lumdata,2))-Stimlog(t.tridx).pre_cue_frames-1)./480; % time in s
    t.tidx = dsearchn(t.tdata', p.ep_time');
    
    res.lum.data(:,:,i_tr) = t.lumdata(:,t.tidx(1):t.tidx(2));
    
    % extract flickertype
    res.lum.flickertype{i_tr} = idx.flickertype{i_tr};
    
end

% plot data
figure
tiledlayout(4,1,'TileSpacing','compact')
for i_flickertype = 1:numel(res.flickertype)
    for i_stim = 1:2
        nexttile
        t.idx = strcmp(res.lum.flickertype,res.flickertype{i_flickertype});
        plot(res.lum.times, squeeze(res.lum.data(i_stim,:,t.idx)),'Color',[0.4 0.4 0.4])
        ylim([-0.2 1.2])
        hold on
        plot(res.lum.times, squeeze(mean(res.lum.data(i_stim,:,t.idx),3)),'Color',[1 0.4 0.4])
        title(sprintf('%s stim %1.0f', res.flickertype{i_flickertype}, i_stim))
    end
end

% calculate FFT
res.lum.fft_ind = nan(2,p.fftres,numel(res.flickertype));
res.lum.fft_evo = res.lum.fft_ind;

for i_stim = 1:2
    for i_flickertype = 1:numel(res.flickertype)
        t.idx = strcmp(res.lum.flickertype,res.flickertype{i_flickertype});
        % induced
        t.data = squeeze(res.lum.data(i_stim,:,t.idx));
        res.lum.fft_ind(i_stim,:,i_flickertype) = mean(squeeze(abs(fft(detrend(t.data')',p.fftres,1))*2/size(t.data,1)),2);
        
        % evoked
        t.data = squeeze(mean(res.lum.data(i_stim,:,t.idx),3))';
        res.lum.fft_evo(i_stim,:,i_flickertype) = squeeze(abs(fft(detrend(t.data),p.fftres,1))*2/size(t.data,1));
    end
end
res.lum.fft_xscale = ((0:size(res.lum.fft_ind,2)-1)/size(res.lum.fft_ind,2)) * 480;


figure
tiledlayout(2,1,'TileSpacing','compact')
for i_flickertype = 1:numel(res.flickertype)
        nexttile
        plot(res.lum.fft_xscale, squeeze(res.lum.fft_ind(:,:,i_flickertype)))
        xlim([0 100])
        title(sprintf('FFT of both stims | %s ', res.flickertype{i_flickertype}))
    
end



%% do FFT transforms
EEG_EP_cue_stim = pop_select(EEG, 'time', p.ep_time);
% pop_eegplot(EEG,1,1,1)
% pop_eegplot(EEG_EP_cue_stim,1,1,1)


% index flicker type of trials in analysis
idx.flickertype = [Stimlog([Stimlog.EEG_prep_in]).flickertype]; idx.flickertype = idx.flickertype(1:2:end);
res.flickertype = {'SSVEP';'BRBF'};

% fft - induced
% preallocate
t.fft_ind = nan(EEG_EP_cue_stim.nbchan,p.fftres,EEG_EP_cue_stim.trials);
res.fft_ind = nan(EEG_EP_cue_stim.nbchan,p.fftres,numel(res.flickertype));

% do fft
t.data = squeeze(EEG_EP_cue_stim.data);
fprintf('\ncalculating ffts for %1.0f electrode channels:   ', EEG_EP_cue_stim.nbchan)
for i_el = 1:EEG_EP_cue_stim.nbchan
    fprintf('\b\b%02.0f',i_el)
    t.fft_ind(i_el,:,:) = squeeze(abs(fft(detrend(squeeze(t.data(i_el,:,:))),p.fftres,1))*2/size(t.data,2));
end
fprintf('...done\n')
res.fft_xscale = ((0:size(t.fft_ind,2)-1)/size(t.fft_ind,2)) * EEG_EP_cue_stim.srate;

% average induced for different signaltypes
for i_type = 1:numel(res.flickertype)
    t.idx = strcmp(idx.flickertype, res.flickertype{i_type});
    res.fft_ind(:,:,i_type) = mean(t.fft_ind(:,:,t.idx),3);
end

% fft - evoked
res.fft_evo = nan(EEG_EP_cue_stim.nbchan,p.fftres,numel(res.flickertype));
for i_type = 1:numel(res.flickertype)
    t.idx = strcmp(idx.flickertype, res.flickertype{i_type});
    t.data = detrend(mean(EEG_EP_cue_stim.data(:,:,t.idx),3));
    % figure; plot(EEG_EP_cue_stim.times, t.data(29,:))
    % figure; plot(EEG.times, detrend(mean(EEG.data(29,:,t.idx),3)))
    res.fft_evo(:,:,i_type) = squeeze(abs(fft(t.data,p.fftres,2))*2/size(t.data,2));
end

%% plotting spectra for specified electrodes
pl.elec2plot = {'POz';'Iz';'Oz';'O1';'O2'};
pl.elec2plot = {'Iz';'Oz'};
pl.elec2plot_i = logical(sum(cell2mat(cellfun(@(x) strcmp({EEG.chanlocs.labels},x), pl.elec2plot, 'UniformOutput',false)),1));

figure;
set(gcf,'Position',[100 100 600 400],'PaperPositionMode','auto')
tiledlayout(2,1,'TileSpacing','compact')
nexttile
plot(res.fft_xscale, squeeze(mean(res.fft_ind(pl.elec2plot_i,:,:),1)));
xlim([0 100]); 
xlabel('frequency in Hz');
ylabel('amplitude in \muV/cm²');
legend(res.flickertype);
title(sprintf('induced activity | [%1.1f %1.1f]s | at %s',p.ep_time,vararg2str(pl.elec2plot)))

nexttile
plot(res.fft_xscale, squeeze(mean(res.fft_evo(pl.elec2plot_i,:,:),1)));
xlim([0 100]); 
xlabel('frequency in Hz');
ylabel('amplitude in \muV/cm²');
legend(res.flickertype);
title(sprintf('evoked activity | [%1.1f %1.1f]s | at %s',p.ep_time,vararg2str(pl.elec2plot)))

%% plotting | topo
% plot SSVEP amplitude topographies
pl.freqrange = [-0.1 0.1];
pl.freqs = p.SSVEP_freqs;
pl.freqs = [3.188];
pl.freqs = [67];
pl.sig = {'ind';'evo'};

pl.data = [];
% extract amplitudes
for i_freq = 1:numel(pl.freqs)
    t.fidx = dsearchn(res.fft_xscale', pl.freqs(i_freq)+pl.freqrange');
    t.ftidx = strcmp(res.flickertype, 'SSVEP');
    pl.data(:,i_freq,1) = mean(res.fft_ind(:,t.fidx,t.ftidx),2);
    pl.data(:,i_freq,2) = mean(res.fft_evo(:,t.fidx,t.ftidx),2);
end

figure;
set(gcf,'Position',[100 100 900 200],'PaperPositionMode','auto')
tiledlayout(1,numel(pl.freqs)*2,'TileSpacing','compact')
for i_sig = 1:2
    for i_freq = 1:numel(pl.freqs)
        nexttile
        topoplot( pl.data(:,i_freq,i_sig), EEG.chanlocs(1:64), ...
            'shading', 'interp', 'numcontour', 0, 'maplimits',[0 max(pl.data(:,:,i_sig),[],'all')],'conv','on','colormap',fake_parula,...
            'whitebk','on')
        colorbar
        title(sprintf('SSVEP %1.0f Hz | %s',pl.freqs(i_freq), pl.sig{i_sig}))
    end
end




%% calculate single trial cross-coherence/PLV
p.calc_cohere_flag = 1;

% resample EEG signal to have same sampling rate as Projector?
EEG_rs = pop_resample(EEG,480);

% filter data for SSVEP
% EEG_rsfS = pop_eegfiltnew(EEG_rs, p.filt_SSVEP(1), p.filt_SSVEP(2), 16*EEG_rs.srate, 0, [], 0);
EEG_rsfS1 = EEG_rs;
EEG_rsfS1.data = filterFGx(EEG_rsfS1.data,EEG_rsfS1.srate,p.SSVEP_freqs(1),5,0);
% pop_eegplot(EEG_rsfS1,1,1,1)
% pop_eegplot(EEG_rs,1,1,1)

EEG_rsfS2 = EEG_rs;
EEG_rsfS2.data = filterFGx(EEG_rsfS2.data,EEG_rsfS2.srate,p.SSVEP_freqs(2),5,0);
% pop_eegplot(EEG_rsfS2,1,1,1)


% filter data for BroadbandNoise
% EEG_rsfN = pop_eegfiltnew(EEG_rs, p.filt_Noise(1), p.filt_Noise(2), 16*EEG_rs.srate, 0, [], 0);
EEG_rsfN = EEG_rs;
EEG_rsfN.data = filterFGx(EEG_rsfN.data,EEG_rsfN.srate,p.BRBF_freq,30,1);

% epoch data
EEG_rsfS1ep = pop_epoch(EEG_rsfS1, num2cell(p.trig.cue), [p.plv_lagrange(1)/1000 p.plv_lagrange(2)/1000]+p.ep_time, 'epochinfo', 'yes');
EEG_rsfS2ep = pop_epoch(EEG_rsfS2, num2cell(p.trig.cue), [p.plv_lagrange(1)/1000 p.plv_lagrange(2)/1000]+p.ep_time, 'epochinfo', 'yes');
EEG_rsfNep = pop_epoch(EEG_rsfN, num2cell(p.trig.cue), [p.plv_lagrange(1)/1000 p.plv_lagrange(2)/1000]+p.ep_time, 'epochinfo', 'yes');
% pop_eegplot(EEG_rsfS1ep,1,1,1)

% based on these calculate PLVs for different lags between measured signal and define diode signal
res.PLV.lag_range = p.plv_lagrange; % range in ms
res.PLV.lag_rangeidx = dsearchn(EEG_rsfS1ep.times',res.PLV.lag_range');
res.PLV.lag_idx = res.PLV.lag_rangeidx(1):res.PLV.lag_rangeidx(2);

% index flicker type
idx.flickertype = [Stimlog([Stimlog.EEG_prep_in]).flickertype]; idx.flickertype = idx.flickertype(1:2:end);
idx.SSVEP = find(strcmp(idx.flickertype,'SSVEP'));
idx.BRBF = find(strcmp(idx.flickertype,'BRBF'));

% loop across lags
res.lagged_PLV_SSVEP_data = nan(numel(res.lum.times), numel(res.PLV.lag_idx),EEG_rsfS1.nbchan ,2,2); % time X lag X chan X RDK X [real other SSVEP]
res.lagged_PLV_SSVEP_time = nan(numel(res.lum.times), numel(res.PLV.lag_idx));

% check for coherence file
t.file_loaded = 1;
try
    datin = load(fullfile(p.pathout, sprintf('VP%s_cohere.mat',p.subs{p.subs2use(i_sub)})));
catch
    t.file_loaded = 0;
end

% if a file exists and is loaded and lagged_PLV_SSVEP_data is missing, file doese not exist or coherence should be calculated --> do the calculation
if p.calc_cohere_flag == 1 | (t.file_loaded==1 & ~any(strcmp(fieldnames(datin.res),'lagged_PLV_SSVEP_data'))) | t.file_loaded==0
    wtb.msg = sprintf('calculating %1.0f PLVs | %1.0f trials | SSVEP data ...',numel(res.PLV.lag_idx)*EEG_rsfS1ep.nbchan*4,numel(idx.SSVEP));
    wtb.prgr = 0;
    wtb.f = waitbar(wtb.prgr,wtb.msg);
    for i_lag = 1:numel(res.PLV.lag_idx)
        % do SSVEP phase coherence
        t.PLV_tr = nan(numel(res.lum.times),EEG_rsfS1.nbchan ,numel(idx.SSVEP),2, 2); %time X chan X trials X RDK X [real other SSVEP]
        for i_tr = 1:numel(idx.SSVEP)
            % diode signals around cue
            t.ydata = res.lum.data(:,:,idx.SSVEP(i_tr));
            % pseudo data from BRBF
            t.ydata(3:4,:) = res.lum.data(:,:,randsample(idx.BRBF,1));
            t.ydataf = t.ydata;
            % filter signals
            t.ydataf([1 3],:) =filterFGx(t.ydata([1 3],:),EEG_rsfS1.srate,p.SSVEP_freqs(1),5,0);
            t.ydataf([2 4],:) =filterFGx(t.ydata([2 4],:),EEG_rsfS1.srate,p.SSVEP_freqs(2),5,0);
            t.ydata_hilb = hilbert(t.ydataf')';
            % figure; plot(angle(t.ydata_hilb)')
            % figure; plot(abs(t.ydata_hilb)')
            % figure; plot(t.ydata')
            % figure; plot(t.ydataf')

            % loop across channels
            for i_el = 1:EEG_rsfS1ep.nbchan
                % EEG data
                t.xdata = EEG_rsfS1ep.data(i_el,(1:size(t.ydata_hilb,2))+i_lag-1,idx.SSVEP(i_tr));
                t.xdata(2,:) = EEG_rsfS2ep.data(i_el,(1:size(t.ydata_hilb,2))+i_lag-1,idx.SSVEP(i_tr));
                t.xdata_hilb = hilbert(t.xdata')';
                % figure; plot(angle(t.xdata_hilb)')
                % figure; plot(abs(t.xdata_hilb)')
                % figure; plot(t.xdata')

                % calculate PLV for real signal
                t.PLV_tr(:,i_el,i_tr,1,1) = exp(1i*(angle(t.xdata_hilb(1,:)) - angle(t.ydata_hilb(1,:)))); % RDK1 real
                t.PLV_tr(:,i_el,i_tr,1,2) = exp(1i*(angle(t.xdata_hilb(1,:)) - angle(t.ydata_hilb(3,:)))); % RDK1 pseudo
                t.PLV_tr(:,i_el,i_tr,2,1) = exp(1i*(angle(t.xdata_hilb(2,:)) - angle(t.ydata_hilb(2,:)))); % RDK2 real
                t.PLV_tr(:,i_el,i_tr,2,2) = exp(1i*(angle(t.xdata_hilb(2,:)) - angle(t.ydata_hilb(4,:)))); % RDK2 pseudo

                % trouble shooting data
                %         figure; plot(angle(t.ydata_hilb)); hold on; plot(angle(t.xdata_hilb))
                %         figure; plot((t.ydataf)*0.6*10^6); hold on; plot(t.xdata)
                %         figure; plot((angle(t.xdata_hilb) - angle(t.ydata_hilb)))
                %
                % figure; plot( squeeze(t.PLV_tr(:,i_el,i_tr,1,:)))

                % display waitbar
                wtb.prgr = wtb.prgr +1;
                waitbar(wtb.prgr/(numel(res.PLV.lag_idx)*EEG_rsfS1ep.nbchan*numel(idx.SSVEP)),wtb.f);

            end


        end
        % extract time value
        res.lagged_PLV_SSVEP_time(:,i_lag) = EEG_rsfS1ep.times((1:size(t.ydata_hilb,2))+i_lag-1);

        % extract data
        res.lagged_PLV_SSVEP_data(:,i_lag,:,:,:) = abs(sum(t.PLV_tr,3))/size(t.PLV_tr,3);
        % figure; plot(res.lagged_PLV_time(:,i_lag), squeeze(res.lagged_PLV_SSVEP_data(:,i_lag,:)))

        
    end
    fprintf('...done!\n')
    close(wtb.f)

    res.lagged_PLV_SSVEP_data = single(res.lagged_PLV_SSVEP_data);
    res.date_lagged_PLV_SSVEP_data = datestr(now);

    % extract lag
    res.lagged_PLV_SSVEP_lagtime = EEG_rsfS1ep.times(res.PLV.lag_idx);

    % save file
    save(fullfile(p.pathout, sprintf('VP%s_cohere.mat',p.subs{p.subs2use(i_sub)})), "res")
    
else
    % get data from loaded file
    fprintf('\nused previously calculated lagged_PLV_SSVEP coherence calculation from %s\n', res.date_lagged_PLV_SSVEP_data)
    res.lagged_PLV_SSVEP_data = datin.res.lagged_PLV_SSVEP_data;
    res.lagged_PLV_SSVEP_time = datin.res.lagged_PLV_SSVEP_time;
    res.lagged_PLV_SSVEP_lagtime = datin.res.lagged_PLV_SSVEP_lagtime;

end



% for BRBF signals
% loop across lags
res.lagged_PLV_BRBF_data = nan(numel(res.lum.times), numel(res.PLV.lag_idx),EEG_rsfNep.nbchan ,2,2); % time X lag X chan X RDK X [real | other trial BRBF]
res.lagged_PLV_BRBF_time = nan(numel(res.lum.times), numel(res.PLV.lag_idx));

% if a file exists and is loaded and lagged_PLV_SSVEP_data is missing, file doese not exist or coherence should be calculated --> do the calculation
if p.calc_cohere_flag == 1 | (t.file_loaded==1 & ~any(strcmp(fieldnames(datin.res),'lagged_PLV_BRBF_data'))) | t.file_loaded==0
    wtb.msg = sprintf('calculating %1.0f PLVs | %1.0f trials | BRBF data ...',numel(res.PLV.lag_idx)*EEG_rsfNep.nbchan*4,numel(idx.SSVEP));
    wtb.prgr = 0;
    wtb.f = waitbar(wtb.prgr,wtb.msg);

    for i_lag = 1:numel(res.PLV.lag_idx)
        % do BRBF phase coherence
        t.PLV_tr = nan(numel(res.lum.times),EEG_rsfNep.nbchan ,numel(idx.BRBF),2, 2); %time X chan X trials X RDK X [real other BRBF]
        for i_tr = 1:numel(idx.BRBF)
            % diode signal from around cue
            t.ydata = res.lum.data(:,:,idx.BRBF(i_tr));
            % random lum data from other trial
            t.ydata(3:4,:) = res.lum.data(:,:,randsample(idx.BRBF,1));

            % filter signal
            t.ydataf =filterFGx(t.ydata,EEG_rsfN.srate,p.BRBF_freq,30,0);
            t.ydata_hilb = hilbert(t.ydataf);
            % figure; plot(t.ydata')
            % figure; plot(t.ydataf')
            % figure; plot(angle(t.ydata_hilb)')
            % figure; plot(t.ydataf(1,:)); hold on; plot(detrend(t.ydata(1,:)));
            
            % loop across channels
            for i_el = 1:EEG_rsfNep.nbchan
                % EEG data
                t.xdata = EEG_rsfNep.data(i_el,(1:size(t.ydata_hilb,2))+i_lag-1,idx.BRBF(i_tr));
                t.xdata_hilb = hilbert(t.xdata')';
                % figure; plot(t.xdata)
                % figure; plot(angle(t.xdata_hilb))

%                 % troubleshooting: calculate Coherence between other channel
%                 % test with signals from other channels
%                 t.tsdata = EEG_rsfNep.data([29 38],(1:size(t.ydata_hilb,2))+i_lag-1,idx.BRBF(i_tr));
%                 % test with signals from other channels fixed at single onset (should reveal lagged difference)
%                 t.tsdata = EEG_rsfNep.data([29 38],(1:size(t.ydata_hilb,2))+floor(numel(res.PLV.lag_idx)/2),idx.BRBF(i_tr));
%                 t.ydata_hilb(3:4,:) = hilbert(t.tsdata')';
%                 % figure; plot(t.tsdata')


                % calculate PLV for different RDKs and real as well as pseudo signal
                t.PLV_tr(:,i_el,i_tr,1,1) = exp(1i*(angle(t.xdata_hilb(1,:)) - angle(t.ydata_hilb(1,:)))); % RDK1 real
                t.PLV_tr(:,i_el,i_tr,1,2) = exp(1i*(angle(t.xdata_hilb(1,:)) - angle(t.ydata_hilb(3,:)))); % RDK1 pseudo
                t.PLV_tr(:,i_el,i_tr,2,1) = exp(1i*(angle(t.xdata_hilb(1,:)) - angle(t.ydata_hilb(2,:)))); % RDK2 real
                t.PLV_tr(:,i_el,i_tr,2,2) = exp(1i*(angle(t.xdata_hilb(1,:)) - angle(t.ydata_hilb(4,:)))); % RDK2 pseudo

                % trouble shooting data
                %         figure; plot(angle(t.ydata_hilb)); hold on; plot(angle(t.xdata_hilb))
                %         figure; plot((t.ydataf)*0.6*10^6); hold on; plot(t.xdata)
                %         figure; plot((angle(t.xdata_hilb) - angle(t.ydata_hilb)))

                % display waitbar
                wtb.prgr = wtb.prgr +1;
                waitbar(wtb.prgr/(numel(res.PLV.lag_idx)*EEG_rsfNep.nbchan*numel(idx.BRBF)),wtb.f);

            end
        end
        % extract time value
        res.lagged_PLV_BRBF_time(:,i_lag) = EEG_rsfNep.times((1:size(t.ydata_hilb,2))+i_lag-1);

        % extract data
        res.lagged_PLV_BRBF_data(:,i_lag,:,:,:) = abs(sum(t.PLV_tr,3))/size(t.PLV_tr,3);
        % figure; plot(res.lagged_PLV_time(:,i_lag), squeeze(res.lagged_PLV_BRBF_data(:,i_lag,:)))
    end
    fprintf('...done!\n')
    close(wtb.f)

    res.lagged_PLV_BRBF_data = single(res.lagged_PLV_BRBF_data);
    res.date_lagged_PLV_BRBF_data = datestr(now);

    % extract lag
    res.lagged_PLV_BRBF_lagtime = EEG_rsfNep.times(res.PLV.lag_idx);

    % save file
    save(fullfile(p.pathout, sprintf('VP%s_cohere.mat',p.subs{p.subs2use(i_sub)})), "res")

else
    % get data from loaded file
%     fprintf('\nused previously calculated lagged_PLV_BRBF coherence calculation from %s\n', res.date_lagged_PLV_BRBF_data)
    res.lagged_PLV_BRBF_data = datin.res.lagged_PLV_BRBF_data;
    res.lagged_PLV_BRBF_time = datin.res.lagged_PLV_BRBF_time;
    res.lagged_PLV_BRBF_lagtime = datin.res.lagged_PLV_BRBF_lagtime;
end

%% plot cross-coherence data
if any(strcmp(fieldnames(res),'lagged_PLV_BRBF_data')) & any(strcmp(fieldnames(res),'lagged_PLV_BRBF_data'))
    fprintf('\ndata exists!\n')
else
    fprintf('\ndata does not exist! Load or Calculate Coherence Data!\n')
    return
end

% plot coherence for specified electrode cluster
pl.elec2plot = {'Iz'};
% pl.elec2plot = {'Oz'};
% pl.elec2plot = {'C3'};
% pl.elec2plot = {'O1'};
pl.elec2plot_i = logical(sum(cell2mat(cellfun(@(x) strcmp({EEG.chanlocs.labels},x), pl.elec2plot, 'UniformOutput',false)),1));

pl.cols2plot = [1 0.1 0.1; 0.5 0.1 0.1; 0.2 0.5 1; 0.2 0.25 0.5];
pl.lines2plot = {'-';':';'-';':'};

figure;
set(gcf,'Position',[100 100 700 700],'PaperPositionMode','auto')
subplot(2,1,1)
i_pl = 1;
for i_rdk = 1:2
    for i_dat = 1:2
        plot(res.lagged_PLV_SSVEP_lagtime, squeeze(mean(res.lagged_PLV_SSVEP_data(:,:,pl.elec2plot_i,i_rdk,i_dat),[1 3])), ...
            'Color',pl.cols2plot(i_pl,:), 'LineStyle',pl.lines2plot{i_pl}, 'LineWidth',2)
        hold on
        i_pl = i_pl+1;
    end
end
xlabel('lag in ms')
ylabel('PLV')
% ylim([0 1.1])
legend({'SSVEP1 real';'SSVEP1 pseudo';'SSVEP2 real';'SSVEP2 pseudo'}, 'Location','SouthOutside','Orientation','horizontal')
title(sprintf('SSVEP | avg. PLVs lum and EEG signal at %s for different lags | N = %1.0f trials', vararg2str(pl.elec2plot), numel(idx.SSVEP)))

subplot(2,1,2)
i_pl = 1;
for i_rdk = 1:2
    for i_dat = 1:2
        plot(res.lagged_PLV_BRBF_lagtime, squeeze(mean(res.lagged_PLV_BRBF_data(:,:,pl.elec2plot_i,i_rdk,i_dat),[1 3])), ...
            'Color',pl.cols2plot(i_pl,:), 'LineStyle',pl.lines2plot{i_pl}, 'LineWidth',2)
        hold on
        i_pl = i_pl+1;
    end
end
xlabel('lag in ms')
ylabel('PLV')
% ylim([0 1.1])
legend({'real effect';'random effect'}, 'Location','SouthOutside','Orientation','horizontal')
legend({'BRBF1 real';'BRBF1 pseudo';'BRBF2 real';'BRBF2 pseudo'}, 'Location','SouthOutside','Orientation','horizontal')
title(sprintf('BRBF at | avg. PLVs lum and EEG signal at %s for different lags | N = %1.0f trials', vararg2str(pl.elec2plot), numel(idx.SSVEP)))


%% calculate spectral and inter-trial coherence for SSVEP data only
% epoch data
EEG_rsfS1ep = pop_epoch(EEG_rsfS1, num2cell(p.trig.cue), p.ep_time, 'epochinfo', 'yes');
EEG_rsfS2ep = pop_epoch(EEG_rsfS2, num2cell(p.trig.cue), p.ep_time, 'epochinfo', 'yes');

SZ_EEG1 = size(EEG_rsfS1ep);
SZ_EEG2 = size(EEG_rsfS2ep);
[EEG_rsfS1ep_mag,EEG_rsfS1ep_specCoh,EEG_rsfS1ep_ITPC] = deal(zeros(SZ_EEG1,[1 2]));
[EEG_rsfS2ep_mag,EEG_rsfS2ep_specCoh,EEG_rsfS2ep_ITPC] = deal(zeros(SZ_EEG2,[1 2]));

wtb.msg = sprintf('calculating %1.0f PLVs ...',EEG_rsfNep.nbchan*2);
wtb.prgr = 0;
wtb.f = waitbar(wtb.prgr,wtb.msg);
for i_el = 1:EEG_rsfS1ep.nbchan
    chnSig1 = squeeze(EEG_rsfS1ep.data(i_el,:,:));
    chnSig2 = squeeze(EEG_rsfS2ep.data(i_el,:,:));
            
    %Hilbert
    chnSig1h = hilbert(chnSig1);
    chnSig2h = hilbert(chnSig2);
    
    %Magnitude single trial
    chnSig1m = abs(chnSig1h)'; % trials x time
    chnSig2m = abs(chnSig2h)';
    
    % evoked magnitude
    EEG_rsfS1ep_mag(i_el,:) = abs(mean(chnSig1h,2));
    EEG_rsfS2ep_mag(i_el,:) = abs(mean(chnSig2h,2));
    
    % phases
    chnSig1ph = angle(chnSig1h.'); % trials x time
    chnSig2ph = angle(chnSig2h.');
    
    % ITPC
    EEG_rsfS1ep_ITPC(i_el,:) = abs(mean(exp(1i*chnSig1ph))); 
    EEG_rsfS2ep_ITPC(i_el,:) = abs(mean(exp(1i*chnSig2ph)));
    
    % spectral coherence (magnitude squared coherence)
    for t = 1:SZ_EEG1(2)
        %coh(chans,t) = (  abs(sum(mX(:,t).*mY(:,t).*exp(1).^(1i*phase_diff(:,t)))/n)  .^2)  /  (sum(  (mX(:,t).^2).*(mY(:,t).^2)  )/n);
        EEG_rsfS1ep_specCoh(i_el,t) = (  abs(sum(chnSig1m(:,t).*exp(1).^(1i*chnSig1ph(:,t)))/SZ_EEG1(3))  .^2)  /  (sum(  (chnSig1m(:,t).^2)  )/SZ_EEG1(3));
        EEG_rsfS2ep_specCoh(i_el,t) = (  abs(sum(chnSig2m(:,t).*exp(1).^(1i*chnSig12h(:,t)))/SZ_EEG2(3))  .^2)  /  (sum(  (chnSig2m(:,t).^2)  )/SZ_EEG2(3));
    end
    
    
    % display waitbar
    wtb.prgr = wtb.prgr +1;
    waitbar(wtb.prgr/(EEG_rsfS1ep.nbchan),wtb.f);
end

%% plotting
figure;
set(gcf,'Position',[100 100 600 400],'PaperPositionMode','auto')
tiledlayout(3,1,'TileSpacing','compact')
nexttile
plot(EEG_rsfS1.times, squeeze(mean(EEG_rsfS1ep_mag(pl.elec2plot_i,:),1)));
hold on
plot(EEG_rsfS2.times, squeeze(mean(EEG_rsfS2ep_mag(pl.elec2plot_i,:),1)));
xlim([-200 700]); 
xlabel('latency');
ylabel('amplitude in \muV/cm²');
legend({'SSVEP1';'SSVEP2'});
title(sprintf('evoked activity | [%1.1f %1.1f]s | at %s',p.ep_time,vararg2str(pl.elec2plot)))

nexttile
plot(EEG_rsfS1.times, squeeze(mean( EEG_rsfS1ep_ITPC(pl.elec2plot_i,:,:),1)));
xlim([0 100]); 
xlabel('frequency in Hz');
ylabel('amplitude in \muV/cm²');
legend(res.flickertype);
title(sprintf('evoked activity | [%1.1f %1.1f]s | at %s',p.ep_time,vararg2str(pl.elec2plot)))